---
# This is a shopping list API.  
swagger: "2.0"
info:
  description: digitalLogin REST API definition
  version: 1.0.0
  title: digitalLogin
basePath: /api
schemes:
- http

# Tags organize operations into groups for presentation in the Swagger UI.
# Each tag has an optional description, which the Swagger UI will display in 
# the tag group header.
tags:
- name: User
  description: The User resource, accessed by its ID

paths:
  /users:
    get:
      tags:
      - User
      description: Retrieve a user by their username
      operationId: getUserByName
      consumes: 
      - application/json
      produces: 
      - application/json
      parameters:
      - name: username
        in: query
        description: The name of the user to retrieve
        required: true
        type: string
      responses:
        200:
          description: Successful response, with a representation of the User resource.
          schema:
            # Reference to a Schema Object described in 'definitions' section
            $ref: "#/definitions/User"
        404:
          description: The requested User resource instance was not found.
          
    post:
      tags:
      - User
      description: Create a new user
      operationId: createUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: user
        in: body
        description: The user details to create
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: Created
          schema:
            $ref: "#/definitions/User"
        401:
          description: Not authorized
          
  /users/{id}:
    get:
      tags:
      - User
      description: Retrieves an instance of the resource User, having the specified id.
      operationId: getUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the requested User instance
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Successful response, with a representation of the User resource.
          schema:
            $ref: "#/definitions/User"
        404:
          description: The requested User resource instance was not found.
    post:
      tags:
      - User
      description: Update an existing User instance
      operationId: updateUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the requested User instance
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Successful response, with a representation of the User resource.
          schema:
            # Reference to a Schema Object described in 'definitions' section
            $ref: "#/definitions/User"
        404:
          description: The requested User resource instance was not found.

  /users/{id}/changepassword:
    post:
      tags:
      - User
      description: Change the user password
      operationId: changeUserPassword
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the requested User instance
        required: true
        type: integer
        format: int64
      - name: passwordChangeRequest
        in: body
        required: true
        schema:
          $ref: "#/definitions/PasswordChangeRequest"
      responses:
        200:
          description: Password change succeeded
        401:
          description: Permission denied
        404:
          description: No such user
          
  /authenticate:
    post:
      tags:
      - Authentication
      summary: Authenticate
      description: Authenticate user by Username and Password, return JWT token upon success.
      operationId: authenticatePost
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: JwtAuthenticationRequest
        in: body
        required: true
        schema:
          $ref: "#/definitions/JwtAuthenticationRequest"  
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/JwtAuthenticationResponse"
        401:
          description: Not authorized

  /publickey:
    get:
      tags:
      - Authentication
      summary: Get PublicKey of this service
      description: Retrieve the PublicKey to use for validating JWT tokens signed by this service in UUEncoded format.
      operationId: getPublicKey
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/JwtPublicKeyResponse"
        403:
          description: Invalid Operation

definitions:
  User:
    type: object
    description: An individual User resource instance.
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      isEnabled:
        type: boolean
    example:
      id : "1234"
      username : "simpleuser"
      firstName: "Simple"
      lastName: "User"
      email: "Simple.User@sample.com"
      isEnabled: true

  JwtAuthenticationRequest:
    type: object
    description: A request carrying Username and Password for authentication.
    properties:
      username:
        type: string
      password:
        type: string
    example:
      username: "jhonsnow"
      password: "winterIsComing"

  JwtAuthenticationResponse:
    type: object
    description: Response for a successful authentication containing the token
    properties:
      token:
        type: string
        
  JwtPublicKeyResponse:
    type: object
    description: The public key in UUEncode format
    properties:
      publickey:
        type: string
        
  PasswordChangeRequest:
    type: object
    description: Request to change a user password.
    properties:
      username:
        type: string
      oldpassword:
        type: string
      newpassword:
        type: string
    example:
      username: johnsnow
      oldpassword: winterIsComing
      newpassword: winterIsHere
